// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/wazwki/skillsrock/internal/domain"
)

// TaskServiceInterface is an autogenerated mock type for the TaskServiceInterface type
type TaskServiceInterface struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: ctx, task
func (_m *TaskServiceInterface) CreateTask(ctx context.Context, task *domain.Task) (string, error) {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Task) (string, error)); ok {
		return rf(ctx, task)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Task) string); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Task) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTask provides a mock function with given fields: ctx, task_id
func (_m *TaskServiceInterface) DeleteTask(ctx context.Context, task_id string) error {
	ret := _m.Called(ctx, task_id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, task_id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExportTasks provides a mock function with given fields: ctx
func (_m *TaskServiceInterface) ExportTasks(ctx context.Context) ([]*domain.Task, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ExportTasks")
	}

	var r0 []*domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*domain.Task, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.Task); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAnalytics provides a mock function with given fields: ctx
func (_m *TaskServiceInterface) GetAnalytics(ctx context.Context) (*domain.Analyse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAnalytics")
	}

	var r0 *domain.Analyse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*domain.Analyse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *domain.Analyse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Analyse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTasks provides a mock function with given fields: ctx, filter
func (_m *TaskServiceInterface) GetTasks(ctx context.Context, filter domain.TaskFilter) ([]*domain.Task, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetTasks")
	}

	var r0 []*domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.TaskFilter) ([]*domain.Task, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.TaskFilter) []*domain.Task); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.TaskFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportTasks provides a mock function with given fields: ctx, task
func (_m *TaskServiceInterface) ImportTasks(ctx context.Context, task []*domain.Task) error {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for ImportTasks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*domain.Task) error); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTask provides a mock function with given fields: ctx, task
func (_m *TaskServiceInterface) UpdateTask(ctx context.Context, task *domain.Task) (*domain.Task, error) {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 *domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Task) (*domain.Task, error)); ok {
		return rf(ctx, task)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Task) *domain.Task); ok {
		r0 = rf(ctx, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Task) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTaskServiceInterface creates a new instance of TaskServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskServiceInterface {
	mock := &TaskServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
